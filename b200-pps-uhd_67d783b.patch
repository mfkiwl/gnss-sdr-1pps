From 2ff8c883f72b5c445581eb8f5420f1b22183febf Mon Sep 17 00:00:00 2001
From: Gwenhael Goavec-Merou <gwenhael.goavec-merou@trabucayre.com>
Date: Tue, 10 Nov 2020 12:22:56 +0100
Subject: [PATCH] b200: add everything about PPS generation

Signed-off-by: Gwenhael Goavec-Merou <gwenhael.goavec-merou@trabucayre.com>
---
 usrp3/lib/radio_200/radio_legacy.v     |  20 +++--
 usrp3/top/b200/Makefile.b200.inc       |   2 +
 usrp3/top/b200/b200.v                  |  42 ++++++++-
 usrp3/top/b200/b200_core.v             |  13 ++-
 usrp3/top/b200/b200_io.v               |   3 +-
 usrp3/top/b200/coregen/coregen.cgp     |   2 +-
 usrp3/top/b200/coregen_dsp/coregen.cgp |   2 +-
 usrp3/top/b200/my_pps_gen.v            | 117 ++++++++++++++++++++++++
 usrp3/top/b200/pps_atr.v               | 120 +++++++++++++++++++++++++
 9 files changed, 308 insertions(+), 13 deletions(-)
 create mode 100644 usrp3/top/b200/my_pps_gen.v
 create mode 100644 usrp3/top/b200/pps_atr.v

diff --git a/usrp3/lib/radio_200/radio_legacy.v b/usrp3/lib/radio_200/radio_legacy.v
index 06970f44..071e6ad7 100644
--- a/usrp3/lib/radio_200/radio_legacy.v
+++ b/usrp3/lib/radio_200/radio_legacy.v
@@ -33,7 +33,10 @@ module radio_legacy
 
    output reg [63:0] vita_time_b,
 
-   output [63:0] debug
+   output [63:0] debug,
+   output [5:0] settingsEn,
+   output [9:0]  pps_cnt_ctrl, output pps_cnt_ctrl_en,
+   output        time_sync_o
    );
 
 
@@ -152,7 +155,7 @@ module radio_legacy
      (.clk(radio_clk), .reset(radio_rst), .pps(pps), .sync_in(time_sync), .strobe(1'b1),
       .set_stb(set_stb), .set_addr(set_addr), .set_data(set_data),
       .vita_time(vita_time), .vita_time_lastpps(vita_time_lastpps),
-      .sync_out());
+      .sync_out(time_sync_o));
 
    wire [31:0] debug_radio_ctrl_proc;
    radio_ctrl_proc radio_ctrl_proc
@@ -276,12 +279,19 @@ endgenerate
 
    generate
       if (FP_GPIO != 0) begin: add_fp_gpio
-         gpio_atr #(.BASE(SR_FP_GPIO), .WIDTH(10), .FAB_CTRL_EN(0)) fp_gpio_atr
+         pps_atr #(.BASE(SR_FP_GPIO), .WIDTH(10), .FAB_CTRL_EN(0)) fp_gpio_atr
             (.clk(radio_clk),.reset(radio_rst),
             .set_stb(set_stb),.set_addr(set_addr),.set_data(set_data),
             .rx(run_rx), .tx(run_tx),
-            .gpio_in(fp_gpio_in), .gpio_out(fp_gpio_out), .gpio_ddr(fp_gpio_ddr), 
-            .gpio_out_fab(10'h000 /* no fabric control */), .gpio_sw_rb(fp_gpio_readback));
+			.settingsEn(settingsEn),
+			.pps_cnt_ctrl(pps_cnt_ctrl), .pps_cnt_ctrl_en(pps_cnt_ctrl_en)
+		 );
+         //gpio_atr #(.BASE(SR_FP_GPIO), .WIDTH(10), .FAB_CTRL_EN(0)) fp_gpio_atr
+         //   (.clk(radio_clk),.reset(radio_rst),
+         //   .set_stb(set_stb),.set_addr(set_addr),.set_data(set_data),
+         //   .rx(run_rx), .tx(run_tx),
+         //   .gpio_in(fp_gpio_in), .gpio_out(fp_gpio_out), .gpio_ddr(fp_gpio_ddr), 
+         //   .gpio_out_fab(10'h000 /* no fabric control */), .gpio_sw_rb(fp_gpio_readback));
       end
    endgenerate
 
diff --git a/usrp3/top/b200/Makefile.b200.inc b/usrp3/top/b200/Makefile.b200.inc
index 788280c6..a74ca56e 100644
--- a/usrp3/top/b200/Makefile.b200.inc
+++ b/usrp3/top/b200/Makefile.b200.inc
@@ -69,6 +69,8 @@ b200.v \
 b200_core.v \
 b200_io.v \
 b200.ucf \
+my_pps_gen.v \
+pps_atr.v \
 timing.ucf \
 S6CLK2PIN.v \
 $(B200_COREGEN_SRCS)
diff --git a/usrp3/top/b200/b200.v b/usrp3/top/b200/b200.v
index 811842f3..890a4305 100644
--- a/usrp3/top/b200/b200.v
+++ b/usrp3/top/b200/b200.v
@@ -134,10 +134,11 @@ module b200 (
     ///////////////////////////////////////////////////////////////////////
     wire bus_clk, gpif_clk, radio_clk;
     wire locked;
+	wire clk_40m;
     b200_clk_gen gen_clks
     (
         .CLK_IN1_40_P(codec_main_clk_p), .CLK_IN1_40_N(codec_main_clk_n),
-        .CLK_OUT1_40_int(), .CLK_OUT2_100_gpif(gpif_clk), .CLK_OUT3_100_bus(),
+        .CLK_OUT1_40_int(clk_40m), .CLK_OUT2_100_gpif(gpif_clk), .CLK_OUT3_100_bus(),
         .RESET(reset_global), .LOCKED(locked)
     );
 
@@ -182,7 +183,7 @@ module b200 (
    wire [31:0] rx_data0, rx_data1;
    wire [31:0] tx_data0, tx_data1;
    wire mimo;
-   
+   wire rx_clk_test_s;
    b200_io b200_io_i0
      (
       .reset(reset),
@@ -203,6 +204,7 @@ module b200 (
       
       // Catalina interface   
       .rx_clk(codec_data_clk_p), 
+	  .rx_clk_o(rx_clk_test_s),
       .rx_frame(rx_frame_p),      
       .rx_data(rx_codec_d), 
       
@@ -280,6 +282,10 @@ module b200 (
    // b200 core
    ///////////////////////////////////////////////////////////////////////
    wire [9:0] fp_gpio_in, fp_gpio_out, fp_gpio_ddr;
+   wire time_sync_s, pps_ref_s;
+   wire [9:0] pps_cnt_ctrl;
+   wire       pps_cnt_ctrl_en;
+   wire [5:0] settingsEn;
 
    b200_core #(.EXTRA_BUFF_SIZE(12)) b200_core
    (
@@ -309,19 +315,47 @@ module b200 (
 `endif
 
       .lock_signals(codec_ctrl_out[7:6]),
+	  .settingsEn(settingsEn),
+      .pps_cnt_ctrl(pps_cnt_ctrl), .pps_cnt_ctrl_en(pps_cnt_ctrl_en),
+      .time_sync_o(time_sync_s), .pps_ref_o(pps_ref_s),
       .debug()
    );
 
+/* ------------- */
+/* start modif GGM */
+/* ------------- */
+
+wire [7:0] fp_gpio_s;
+wire proof_s, my_pps, my_pps2;
+
+my_pps_gen #(.MAX_CNT(40_000_000))
+my_pps_inst (.clk_40m(clk_40m), .radio_clk(radio_clk), .locked(locked),
+	.time_sync_i(time_sync_s),
+	.pps_cnt_ctrl_en(pps_cnt_ctrl_en), .pps_cnt_ctrl(pps_cnt_ctrl),
+	.proof(proof_s), .pps(my_pps), .pps2(my_pps2)
+);
+
+
+`ifdef USE_PPS
+//	assign fp_gpio = {fp_gpio_s[7:2], proof_s, my_pps};
+	assign fp_gpio = {settingsEn, my_pps2, my_pps};
+`else
+	assign fp_gpio = {fp_gpio_s[7:1], rx_clk_test_s};
+`endif
+/* ------------- */
+/* end modif GGM */
+/* ------------- */
+
 `ifdef TARGET_B210
    `ifdef DEBUG_UART
       gpio_atr_io #(.WIDTH(8)) gpio_atr_io_inst (   // B210 with UART
-         .clk(radio_clk), .gpio_pins(fp_gpio),
+         .clk(radio_clk), .gpio_pins(fp_gpio_s),
          .gpio_ddr(fp_gpio_ddr[7:0]), .gpio_out(fp_gpio_out[7:0]), .gpio_in(fp_gpio_in[7:0])
       );
       assign fp_gpio_in[9:8] = 2'b00;
    `else
       gpio_atr_io #(.WIDTH(10)) gpio_atr_io_inst (  // B210 no UART
-         .clk(radio_clk), .gpio_pins({FPGA_RXD0, FPGA_TXD0, fp_gpio}),
+         .clk(radio_clk), .gpio_pins({FPGA_RXD0, FPGA_TXD0, fp_gpio_s}),
          .gpio_ddr(fp_gpio_ddr), .gpio_out(fp_gpio_out), .gpio_in(fp_gpio_in)
       );
    `endif
diff --git a/usrp3/top/b200/b200_core.v b/usrp3/top/b200/b200_core.v
index f03c5ea1..67b15624 100644
--- a/usrp3/top/b200/b200_core.v
+++ b/usrp3/top/b200/b200_core.v
@@ -70,6 +70,12 @@ module b200_core
     ////////////////////////////////////////////////////////////////////
     input [1:0] lock_signals,
 
+	output [5:0] settingsEn,
+    output [9:0]  pps_cnt_ctrl, output pps_cnt_ctrl_en,
+    output [9:0] pps_cnt_ctrl_fake, output pps_cnt_ctrl_en_fake,
+	output time_sync_o,
+	output pps_ref_o,
+
     ////////////////////////////////////////////////////////////////////
     // debug signals
     ////////////////////////////////////////////////////////////////////
@@ -102,6 +108,7 @@ module b200_core
     wire int_pps;
     pps_generator #(.CLK_FREQ(100000000)) pps_gen
     (.clk(bus_clk), .reset(1'b0), .pps(int_pps));
+	assign pps_ref_o = int_pps;
 
     // Flop PPS signals into radio clock domain
     reg [1:0] 	 gpsdo_pps_del, ext_pps_del, int_pps_del;
@@ -318,7 +325,10 @@ module b200_core
       .rx_tdata(r0_rx_tdata), .rx_tlast(r0_rx_tlast),  .rx_tvalid(r0_rx_tvalid), .rx_tready(r0_rx_tready),
       .ctrl_tdata(r0_ctrl_tdata), .ctrl_tlast(r0_ctrl_tlast),  .ctrl_tvalid(r0_ctrl_tvalid), .ctrl_tready(r0_ctrl_tready),
       .resp_tdata(r0_resp_tdata), .resp_tlast(r0_resp_tlast),  .resp_tvalid(r0_resp_tvalid), .resp_tready(r0_resp_tready),
-      .debug(radio0_debug)
+      .debug(radio0_debug),
+	  .settingsEn(settingsEn),
+   	  .pps_cnt_ctrl(pps_cnt_ctrl), .pps_cnt_ctrl_en(pps_cnt_ctrl_en),
+	  .time_sync_o(time_sync_o)
    );
 
     /*******************************************************************
@@ -350,6 +360,7 @@ module b200_core
       .rx_tdata(r1_rx_tdata), .rx_tlast(r1_rx_tlast),  .rx_tvalid(r1_rx_tvalid), .rx_tready(r1_rx_tready),
       .ctrl_tdata(r1_ctrl_tdata), .ctrl_tlast(r1_ctrl_tlast),  .ctrl_tvalid(r1_ctrl_tvalid), .ctrl_tready(r1_ctrl_tready),
       .resp_tdata(r1_resp_tdata), .resp_tlast(r1_resp_tlast),  .resp_tvalid(r1_resp_tvalid), .resp_tready(r1_resp_tready),
+   	  .pps_cnt_ctrl(pps_cnt_ctrl_fake), .pps_cnt_ctrl_en(pps_cnt_ctrl_en_fake),
       .debug(radio1_debug)
    );
 `else
diff --git a/usrp3/top/b200/b200_io.v b/usrp3/top/b200/b200_io.v
index 1c6ea2dc..8a2a6e90 100644
--- a/usrp3/top/b200/b200_io.v
+++ b/usrp3/top/b200/b200_io.v
@@ -32,6 +32,7 @@ module b200_io
 
      // Catalina interface
      input 	  rx_clk,
+	 output   rx_clk_o, // GGM: to output this signal
      input 	  rx_frame,
      input [11:0]  rx_data,
      output 	  tx_clk,
@@ -66,7 +67,7 @@ module b200_io
    wire 			siso2_clk_unbuf;
 
    IBUFG clk_ibufg (.O(rx_clk_buf), .I(rx_clk));
-
+	assign rx_clk_o = rx_clk_buf;
    //------------------------------------------------------------------
    //
    // Buffers for LEFT TOP half bank pins
diff --git a/usrp3/top/b200/coregen/coregen.cgp b/usrp3/top/b200/coregen/coregen.cgp
index 24f6041a..fbcbca1f 100644
--- a/usrp3/top/b200/coregen/coregen.cgp
+++ b/usrp3/top/b200/coregen/coregen.cgp
@@ -1,6 +1,6 @@
 SET busformat = BusFormatAngleBracketNotRipped
 SET designentry = Verilog
-SET device = xc6slx75
+SET device = xc6slx150
 SET devicefamily = spartan6
 SET flowvendor = Foundation_ISE
 SET package = fgg484
diff --git a/usrp3/top/b200/coregen_dsp/coregen.cgp b/usrp3/top/b200/coregen_dsp/coregen.cgp
index 52a3a53e..7dbb4006 100644
--- a/usrp3/top/b200/coregen_dsp/coregen.cgp
+++ b/usrp3/top/b200/coregen_dsp/coregen.cgp
@@ -1,6 +1,6 @@
 SET busformat = BusFormatAngleBracketNotRipped
 SET designentry = Verilog
-SET device = xc6slx75
+SET device = xc6slx150
 SET devicefamily = spartan6
 SET flowvendor = Other
 SET package = fgg484
diff --git a/usrp3/top/b200/my_pps_gen.v b/usrp3/top/b200/my_pps_gen.v
new file mode 100644
index 00000000..c8e1261b
--- /dev/null
+++ b/usrp3/top/b200/my_pps_gen.v
@@ -0,0 +1,117 @@
+`define USE_PPS 1
+`define RST_CNT_CTRL 1
+
+module my_pps_gen #(
+	parameter MAX_CNT = 40_000_000,
+	parameter WIDTH = $clog2(MAX_CNT) + 3
+) (
+	input       clk_40m,         // <- used for everything
+	input       radio_clk,       // <- only used for sync
+	input       locked,          // PLL, used as reset
+	input       time_sync_i,     // force sync with timed cmd
+	input       pps_cnt_ctrl_en, // pps fix enable
+	input [9:0] pps_cnt_ctrl,    // pps fix
+	output reg  proof,           // stupid test
+	output      pps,             // official pps
+	output      pps2             // snd pps without correction
+);
+
+/* real and ref PPS */
+wire my_pps, my_pps2;
+
+/* detect rising and falling PPS edge */
+reg my_pps_d;
+wire my_pps_rise = (my_pps ^ my_pps_d) & my_pps;
+wire my_pps_fall = (my_pps ^ my_pps_d) & !my_pps;
+/* store previous PPS state */
+always @(posedge clk_40m) begin
+	my_pps_d <= my_pps;
+end
+
+/* pps fix machinery */
+/* radio clk is slower than 40m -> detect rising on enable */
+reg        cnt_ctrl_en_d; // delayed enable
+wire       cnt_ctrl_en;   // FIFO out enable
+wire       cnt_ctrl_en_strobe = (cnt_ctrl_en ^ cnt_ctrl_en_d) & cnt_ctrl_en;
+wire [9:0] cnt_ctrl_sync; // pps fix after the FIFO
+reg  [7:0] cnt_ctrl_d, cnt_ctrl_d2;
+reg        cnt_ack_s, cnt_ctrl_rdy; // handshake
+
+always @(posedge clk_40m) begin
+	/* previous enable state */
+	cnt_ctrl_en_d <= cnt_ctrl_en;
+
+	/* store next pps fix at PPS falling edge */
+	if (!locked) begin
+		cnt_ctrl_d <= 8'h0;
+	end else if (my_pps_fall) begin
+		cnt_ctrl_d <= cnt_ctrl_d2;
+	end
+
+	/* ack new pps fix */
+	cnt_ack_s <= (my_pps_fall) ? cnt_ctrl_rdy : 1'b0;
+
+	/* store user command
+	 * reset this register when content is take
+	 * by next
+	 */
+	if (!locked || cnt_ack_s) begin
+		cnt_ctrl_d2 <= 8'h0;
+		cnt_ctrl_rdy <= 1'b0;
+	end else if (cnt_ctrl_en_strobe) begin
+		cnt_ctrl_d2 <= cnt_ctrl_sync[7:0];
+		cnt_ctrl_rdy <= 1'b1;
+	end
+end
+
+/* move pps fix from radio domain to 40MHz domain */
+`ifdef COCOTB_SIM
+	assign cnt_ctrl_en = pps_cnt_ctrl_en;
+	assign cnt_ctrl_sync = pps_cnt_ctrl;
+`else
+	axi_fifo_2clk #(.WIDTH(64), .SIZE(0)) vita_time_fifo (
+		.reset(!locked),
+		.i_aclk(radio_clk), .i_tvalid(1'b1), .i_tready(),
+		.i_tdata({pps_cnt_ctrl_en, pps_cnt_ctrl}),
+		.o_aclk(clk_40m), .o_tvalid(), .o_tready(1'b1),
+		.o_tdata({cnt_ctrl_en, cnt_ctrl_sync})
+	);
+`endif
+
+/* ref PPS */
+reg [WIDTH:0] pps_cnt2;
+assign        my_pps2 = pps_cnt2 > MAX_CNT/2;
+wire          rst_cnt2 = pps_cnt2 == 0;
+always @(posedge clk_40m) begin
+	if (!locked | rst_cnt2 | time_sync_i) begin
+		pps_cnt2 <= {1'b0, MAX_CNT} - 1;
+	end else begin
+		pps_cnt2 <= pps_cnt2 - 1'b1;
+	end
+end
+/* end ref PPS */
+
+/* True PPS */
+reg [WIDTH:0] pps_cnt;
+assign        my_pps = pps_cnt > MAX_CNT/2;
+wire          rst_cnt = pps_cnt == 0;
+always @(posedge clk_40m) begin
+	if (!locked | rst_cnt | time_sync_i) begin
+		pps_cnt <= $signed({1'b0, MAX_CNT}) + $signed(cnt_ctrl_d) - 1;
+	end else begin
+		pps_cnt <= pps_cnt - 1'b1;
+	end
+end
+
+assign pps = my_pps;
+assign pps2 = my_pps2;
+
+/* simple test */
+always @(posedge clk_40m) begin
+	if (!locked)
+		proof <= 1'b0;
+	else if (cnt_ctrl_en_strobe)
+		proof <= !proof;
+end
+	
+endmodule
diff --git a/usrp3/top/b200/pps_atr.v b/usrp3/top/b200/pps_atr.v
new file mode 100644
index 00000000..1e032e3f
--- /dev/null
+++ b/usrp3/top/b200/pps_atr.v
@@ -0,0 +1,120 @@
+
+//
+// Copyright 2011 Ettus Research LLC
+// Copyright 2018 Ettus Research, a National Instruments Company
+//
+// SPDX-License-Identifier: LGPL-3.0-or-later
+//
+
+module pps_atr #(
+  parameter BASE          = 0,
+  parameter WIDTH         = 32,
+  parameter FAB_CTRL_EN   = 0,
+  parameter DEFAULT_DDR   = 0,
+  parameter DEFAULT_IDLE  = 0
+) (
+  input clk, input reset,                                       //Clock and reset
+  input set_stb, input [7:0] set_addr, input [31:0] set_data,   //Settings control interface
+  input rx, input tx,                                           //Run signals that indicate tx and rx operation
+  output     [5:0]       settingsEn,
+  output reg [WIDTH-1:0] pps_cnt_ctrl,
+  output reg             pps_cnt_ctrl_en
+
+  //input      [WIDTH-1:0]  gpio_in,                              //GPIO input state
+  //output reg [WIDTH-1:0]  gpio_out,                             //GPIO output state
+  //output reg [WIDTH-1:0]  gpio_ddr,                             //GPIO direction (0=input, 1=output)
+  //input      [WIDTH-1:0]  gpio_out_fab,                         //GPIO driver bus from fabric
+  //output reg [WIDTH-1:0]  gpio_sw_rb                            //Readback value for software
+);
+  genvar i;
+
+  wire [WIDTH-1:0]   in_idle, in_tx, in_rx, in_fdx, ddr_reg, atr_disable, fabric_ctrl;
+  reg [WIDTH-1:0]    ogpio, igpio;
+
+  wire [WIDTH-1:0] pps_cnt_ctrl_d;
+  wire             pps_cnt_ctrl_chg;
+
+  setting_reg #(.my_addr(BASE+0), .width(WIDTH), .at_reset(DEFAULT_IDLE)) reg_idle (
+    .clk(clk),.rst(reset),.strobe(set_stb),.addr(set_addr), .in(set_data),
+    .out(in_idle),.changed(settingsEn[0]));
+
+  setting_reg #(.my_addr(BASE+1), .width(WIDTH)) reg_rx (
+    .clk(clk),.rst(reset),.strobe(set_stb),.addr(set_addr), .in(set_data),
+    .out(in_rx),.changed(settingsEn[1]));
+
+  setting_reg #(.my_addr(BASE+2), .width(WIDTH)) reg_tx (
+    .clk(clk),.rst(reset),.strobe(set_stb),.addr(set_addr), .in(set_data),
+    .out(in_tx),.changed(settingsEn[2]));
+
+  setting_reg #(.my_addr(BASE+3), .width(WIDTH)) reg_fdx (
+    .clk(clk),.rst(reset),.strobe(set_stb),.addr(set_addr), .in(set_data),
+    .out(in_fdx),.changed(settingsEn[3]));
+
+  setting_reg #(.my_addr(BASE+4), .width(WIDTH), .at_reset(DEFAULT_DDR)) reg_ddr (
+    .clk(clk),.rst(reset),.strobe(set_stb),.addr(set_addr), .in(set_data),
+    .out(/*ddr_reg*/pps_cnt_ctrl_d),.changed(pps_cnt_ctrl_chg));
+  assign settingsEn[4] = pps_cnt_ctrl_chg;
+
+  /* not use it !!! */
+  setting_reg #(.my_addr(BASE+5), .width(WIDTH)) reg_atr_disable (
+    .clk(clk),.rst(reset),.strobe(set_stb),.addr(set_addr), .in(set_data),
+    .out(/*pps_cnt_ctrl_d*/),.changed(settingsEn[5]));
+
+  //generate if (FAB_CTRL_EN == 1) begin
+  //  setting_reg #(.my_addr(BASE+6), .width(WIDTH)) reg_fabric_ctrl (
+  //    .clk(clk),.rst(reset),.strobe(set_stb),.addr(set_addr), .in(set_data),
+  //    .out(fabric_ctrl),.changed());
+  //end else begin
+  //  assign fabric_ctrl = {WIDTH{1'b0}};
+  //end endgenerate
+
+
+  always @(posedge clk) begin
+  //	if (reset)
+  //    pps_cnt_ctrl_en <= 1'b0;
+  //  else
+      pps_cnt_ctrl_en <= pps_cnt_ctrl_chg;
+
+  //	if (reset)
+  //   assign pps_cnt_ctrl = {WIDTH{1'b0}};
+  //  else if (pps_cnt_ctrl_chg)
+      pps_cnt_ctrl <= pps_cnt_ctrl_d;
+  end
+
+  ////Pipeline rx and tx signals for easier timing closure
+  //reg rx_d, tx_d;
+  //always @(posedge clk)
+  //  {rx_d, tx_d} <= {rx, tx};
+
+  //generate for (i=0; i<WIDTH; i=i+1) begin: gpio_mux_gen
+  //  //ATR selection MUX
+  //  always @(posedge clk) begin
+  //    case({atr_disable[i], tx_d, rx_d})
+  //      3'b000:   ogpio[i] <= in_idle[i];
+  //      3'b001:   ogpio[i] <= in_rx[i];
+  //      3'b010:   ogpio[i] <= in_tx[i];
+  //      3'b011:   ogpio[i] <= in_fdx[i];
+  //      default:  ogpio[i] <= in_idle[i];   //If ATR mode is disabled, always use IDLE value
+  //    endcase
+  //  end
+
+  // //Pipeline input, output and direction
+  // //For fabric access, insert MUX as close to the IO as possible
+  // always @(posedge clk) begin
+  //   gpio_out[i] <= fabric_ctrl[i] ? gpio_out_fab[i] : ogpio[i];
+  // end
+  //end endgenerate
+
+  //always @(posedge clk)
+  //  igpio <= gpio_in;
+
+  //always @(posedge clk)
+  //  gpio_ddr <= ddr_reg;
+
+  ////Generate software readback state
+  //generate for (i=0; i<WIDTH; i=i+1) begin: gpio_rb_gen
+  //  always @(posedge clk)
+  //    gpio_sw_rb[i] <= gpio_ddr[i] ? gpio_out[i] : igpio[i];
+  //end endgenerate
+
+endmodule // gpio_atr
-- 
2.26.2

